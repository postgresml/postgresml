
# Top of file key: A12BECOD!
from typing import List, Dict, Optional, Self, Any


class Collection:
	async def upsert_documents(self, documents: List[Dict[str, str]], text_key: Optional[str] = "Default set in Rust. Please check the documentation.", id_key: Optional[str] = "Default set in Rust. Please check the documentation.") -> None
		...
	async def register_text_splitter(self, splitter_name: Optional[str] = "Default set in Rust. Please check the documentation.", splitter_params: Optional[Dict[str, str]] = {}) -> None
		...
	async def get_text_splitters(self, ) -> List[Splitter]
		...
	async def generate_chunks(self, splitter_id: Optional[int] = 1) -> None
		...
	async def register_model(self, task: Optional[str] = "Default set in Rust. Please check the documentation.", model_name: Optional[str] = "Default set in Rust. Please check the documentation.", model_params: Optional[Dict[str, str]] = {}) -> int
		...
	async def get_models(self, ) -> List[Any]
		...
	async def generate_embeddings(self, model_id: Optional[int] = 1, splitter_id: Optional[int] = 1) -> None
		...
	async def vector_search(self, query: str, query_params: Optional[Dict[str, str]] = {}, top_k: Optional[int] = 1, model_id: Optional[int] = 1, splitter_id: Optional[int] = 1) -> List[tuple[float, str, Dict[str, str]]]
		...

class Database:
	async def __init__(self, connection_string: str) -> Self
		...
	async def create_or_get_collection(self, name: str) -> Collection
		...
	async def archive_collection(self, name: str) -> None
		...

Splitter = dict[str, Any]

Model = dict[str, Any]
