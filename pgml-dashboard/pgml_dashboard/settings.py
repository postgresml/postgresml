"""
Django settings for pgml_dashboard project.

Generated by 'django-admin startproject' using Django 4.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

from pathlib import Path
import os
import mimetypes

import dotenv

dotenv.load_dotenv()

SENTRY_DSN = os.environ.get("SENTRY_DSN", None)
if SENTRY_DSN:
    import sentry_sdk

    sentry_sdk.init(
        dsn=SENTRY_DSN,
        traces_sample_rate=1.0,
    )

mimetypes.add_type("application/javascript", ".mjs")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.0/howto/deployment/checklist/
SECRET_KEY = os.environ["DJANGO_SECRET_KEY"]

DEBUG = os.environ["DJANGO_DEBUG"] == "True"

ALLOWED_HOSTS = [x.strip() for x in os.environ.get("DJANGO_ALLOWED_HOSTS", "localhost, 127.0.0.1").split(",")]
CSRF_TRUSTED_ORIGINS = [
    x.strip() for x in os.environ.get("DJANGO_CSRF_TRUSTED_ORIGINS", "http://localhost, http://127.0.0.1").split(",")
]

CONN_MAX_AGE = 60

# Application definition

INSTALLED_APPS = [
    "app.apps.AppConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "rest_framework",
    "django_filters",
    "request",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "app.middleware.JwtAuthentcationMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "request.middleware.RequestMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "pgml_dashboard.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "app.context_processors.url_prefix",
            ],
        },
    },
]

PROJECT_PATH = os.path.realpath(os.path.dirname(__file__))

WSGI_APPLICATION = "pgml_dashboard.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases
from urllib.parse import urlparse

database = urlparse(os.environ.get("PGML_DATABASE_URL", "postgres:///pgml_development"))

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "OPTIONS": {"options": "-c search_path=public,pgml"},
        "NAME": database.path[1:],
        "USER": database.username,
        "PASSWORD": database.password,
        "HOST": database.hostname,
        "PORT": database.port,
        "SCHEMA": "pgml",
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"],
    "DEFAULT_FILTER_BACKENDS": ["django_filters.rest_framework.DjangoFilterBackend"],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.LimitOffsetPagination",
    "PAGE_SIZE": 10,
}


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/
URL_PREFIX = os.environ.get("DJANGO_URL_PREFIX", "")

if URL_PREFIX:
    if URL_PREFIX.startswith("/"):
        URL_PREFIX = URL_PREFIX[1:]
    if not URL_PREFIX.endswith("/"):
        URL_PREFIX += "/"

if DEBUG:
    STATIC_URL = "/static/"
else:
    STATIC_URL = "/" + URL_PREFIX + "/static/"

STATIC_ROOT = "static"


# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
JWT_AUTH_ENABLED = os.environ.get("DJANGO_JWT_AUTH_ENABLED", "False") == "True"

# Ignore requests to /api/requests API
# otherwise we would be generating fake traffic.
REQUEST_IGNORE_PATHS = [
    r"api/requests",
]
